datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model SubscriptionTier {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  student_count_min Int
  student_count_max Int
  price_per_student Float
  billing_cycle     String
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  tenants             Tenant[]
  institution_billing InstitutionBilling[]
}

model Tenant {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  contact_email        String
  phone                String
  address              String
  subscription_tier_id String   @db.ObjectId
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now())

  subscriptionTier    SubscriptionTier     @relation(fields: [subscription_tier_id], references: [id])
  users               User[]
  students            Student[]
  courses             Course[]
  teacher_courses     TeacherCourse[]
  enrollments         Enrollment[]
  attendance          Attendance[]
  performance         Performance[]
  institution_billing InstitutionBilling[]
  invoices            Invoice[]
  notifications       Notification[]
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id  String   @db.ObjectId
  name       String
  email      String
  password   String
  role       String
  is_active  Boolean
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  tenant               Tenant          @relation(fields: [tenant_id], references: [id])
  teacherCourses       TeacherCourse[]
  attendanceMarked     Attendance[]    @relation("markedBy")
  performanceEvaluated Performance[]   @relation("evaluatedBy")
  notificationsCreated Notification[]
}

model Student {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id        String   @db.ObjectId
  name             String
  email            String
  phone            String
  address          String
  guardian_name    String
  guardian_contact String
  status           String
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  tenant      Tenant       @relation(fields: [tenant_id], references: [id])
  enrollments Enrollment[]
  invoices    Invoice[]
}

model Course {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id      String   @db.ObjectId
  name           String
  description    String
  duration_weeks Int
  fee            Float
  start_date     DateTime
  end_date       DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  tenant         Tenant          @relation(fields: [tenant_id], references: [id])
  teacherCourses TeacherCourse[]
  enrollments    Enrollment[]
  invoices       Invoice[]
}

model TeacherCourse {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id  String @db.ObjectId
  course_id  String @db.ObjectId
  teacher_id String @db.ObjectId

  tenant  Tenant @relation(fields: [tenant_id], references: [id])
  course  Course @relation(fields: [course_id], references: [id])
  teacher User   @relation(fields: [teacher_id], references: [id])
}

model PaymentOption {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  enrollments Enrollment[]
}

model Enrollment {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id         String   @db.ObjectId
  course_id         String   @db.ObjectId
  student_id        String   @db.ObjectId
  paymentoptions_id String   @db.ObjectId
  enrolled_at       DateTime
  status            String

  tenant        Tenant        @relation(fields: [tenant_id], references: [id])
  course        Course        @relation(fields: [course_id], references: [id])
  student       Student       @relation(fields: [student_id], references: [id])
  paymentOption PaymentOption @relation(fields: [paymentoptions_id], references: [id])
  attendance    Attendance[]
  performance   Performance[]
}

model Attendance {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id     String   @db.ObjectId
  enrollment_id String   @db.ObjectId
  date          DateTime
  status        String
  marked_by     String   @db.ObjectId
  created_at    DateTime @default(now())

  tenant     Tenant     @relation(fields: [tenant_id], references: [id])
  enrollment Enrollment @relation(fields: [enrollment_id], references: [id])
  markedBy   User       @relation("markedBy", fields: [marked_by], references: [id])
}

model Performance {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id     String   @db.ObjectId
  enrollment_id String   @db.ObjectId
  marks         Float
  remarks       String
  evaluated_by  String   @db.ObjectId
  created_at    DateTime @default(now())

  tenant      Tenant     @relation(fields: [tenant_id], references: [id])
  enrollment  Enrollment @relation(fields: [enrollment_id], references: [id])
  evaluatedBy User       @relation("evaluatedBy", fields: [evaluated_by], references: [id])
}

model InstitutionBilling {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id             String    @db.ObjectId
  subscription_tier_id  String    @db.ObjectId
  month_year            String
  total_active_students Int
  amount_per_student    Float
  total_amount          Float
  status                String
  generated_at          DateTime
  paid_at               DateTime?

  tenant           Tenant           @relation(fields: [tenant_id], references: [id])
  subscriptionTier SubscriptionTier @relation(fields: [subscription_tier_id], references: [id])
}

model Invoice {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id    String    @db.ObjectId
  student_id   String    @db.ObjectId
  course_id    String    @db.ObjectId
  period_start DateTime
  period_end   DateTime
  amount       Float
  status       String
  generated_at DateTime
  paid_at      DateTime?

  tenant  Tenant  @relation(fields: [tenant_id], references: [id])
  student Student @relation(fields: [student_id], references: [id])
  course  Course  @relation(fields: [course_id], references: [id])
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id  String   @db.ObjectId
  title      String
  message    String
  type       String
  created_by String   @db.ObjectId
  created_at DateTime @default(now())

  tenant  Tenant @relation(fields: [tenant_id], references: [id])
  creator User   @relation(fields: [created_by], references: [id])
}
