generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model SubscriptionTiers {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  student_count_min Int
  student_count_max Int
  start_date        DateTime?
  end_date          DateTime?
  price_per_student Float
  billing_cycle     String
  created_at        DateTime
  updated_at        DateTime

  TenantSubscriptions TenantSubscriptions[]
  InstitutionBilling  InstitutionBilling[]
}

model Tenants {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  contact_email String
  phone         String
  address       String
  gst           String
  created_at    DateTime
  updated_at    DateTime

  Branches            Branches[]
  Users               Users[]
  Performance         Performance[]
  TenantSubscriptions TenantSubscriptions[]
}

model TenantSubscriptions {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  subscriptiontierid String
  start_date         DateTime
  end_date           DateTime
  created_at         DateTime
  updated_at         DateTime

  subscriptiontier SubscriptionTiers @relation(fields: [subscriptiontierid], references: [id])
  Tenants          Tenants?          @relation(fields: [tenantsId], references: [id])
  tenantsId        String?
}

model Branches {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  contact_email String?
  phone         String?
  address       String?
  gst           String?
  tenant_id     String
  created_at    DateTime
  updated_at    DateTime

  Tenant             Tenants              @relation(fields: [tenant_id], references: [id])
  Batches            Batches[]
  Products           Products[]
  Staff              Staff[]
  Invoices           Invoices[]
  Notifications      Notifications[]
  InstitutionBilling InstitutionBilling[]
  StaffMappings      StaffMappings[]
  Students           Students[]
}

model Users {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id  String?
  name       String   @unique
  email      String   @unique
  password   String
  role       String
  is_active  Boolean
  created_at DateTime
  updated_at DateTime

  Tenant        Tenants?        @relation(fields: [tenant_id], references: [id])
  Notifications Notifications[] @relation("NotificationCreator")
  Staff         Staff[]
}

model Batches {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  branch_id  String
  weekdays   String
  start_time DateTime
  end_time   DateTime
  status     String
  created_at DateTime
  updated_at DateTime

  Branch            Branches            @relation(fields: [branch_id], references: [id])
  StaffMappings     StaffMappings[]
  EnrollmentBatches EnrollmentBatches[]
  Attendance        Attendance[]
}

model PaymentOptions {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  created_at DateTime
  updated_at DateTime

  EnrollmentPaymentDetails EnrollmentPaymentDetails[]
}

model Products {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  branch_id    String
  name         String
  description  String
  max_classes  Int
  comp_classes Int
  start_date   DateTime
  end_date     DateTime
  created_at   DateTime
  updated_at   DateTime

  Branch        Branches        @relation(fields: [branch_id], references: [id])
  ProductFees   ProductFees[]
  StaffMappings StaffMappings[]
  Enrollments   Enrollments[]
  Invoices      Invoices[]
}

model ProductFees {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  product_id String
  fee        Float
  start_date DateTime
  end_date   DateTime
  created_at DateTime
  updated_at DateTime

  Product Products @relation(fields: [product_id], references: [id])
}

model Staff {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  qualification  String
  experience     String
  specialization String
  salary         Float
  start_date     DateTime
  end_date       DateTime
  branch_id      String
  user_id        String
  created_at     DateTime
  updated_at     DateTime

  Branch        Branches        @relation(fields: [branch_id], references: [id])
  User          Users           @relation(fields: [user_id], references: [id])
  StaffMappings StaffMappings[]
  Attendance    Attendance[]
  Performance   Performance[]
}

model StaffMappings {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  branch_id  String
  batch_id   String
  product_id String
  staff_id   String

  Branch  Branches @relation(fields: [branch_id], references: [id])
  Batch   Batches  @relation(fields: [batch_id], references: [id])
  Product Products @relation(fields: [product_id], references: [id])
  Staff   Staff    @relation(fields: [staff_id], references: [id])
}

model Students {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  branch_id        String
  name             String
  email            String
  phone            String
  address          String
  guardian_name    String
  guardian_contact String
  status           String
  created_at       DateTime
  updated_at       DateTime

  Branch      Branches      @relation(fields: [branch_id], references: [id])
  Enrollments Enrollments[]
  Invoices    Invoices[]
}

model Enrollments {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  product_id     String
  student_id     String
  enrolled_date  DateTime
  completed_date DateTime?
  dropped_date   DateTime?
  start_date     DateTime
  end_date       DateTime
  status         String
  created_at     DateTime
  updated_at     DateTime

  Product                  Products                   @relation(fields: [product_id], references: [id])
  Student                  Students                   @relation(fields: [student_id], references: [id])
  EnrollmentPaymentDetails EnrollmentPaymentDetails[]
  EnrollmentBatches        EnrollmentBatches[]
  Attendance               Attendance[]
  Performance              Performance[]
}

model EnrollmentPaymentDetails {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  enrollment_id    String
  paymentoption_id String
  created_at       DateTime
  updated_at       DateTime

  Enrollment    Enrollments    @relation(fields: [enrollment_id], references: [id])
  PaymentOption PaymentOptions @relation(fields: [paymentoption_id], references: [id])
}

model EnrollmentBatches {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  enrollment_id String
  batch_id      String
  created_at    DateTime
  updated_at    DateTime

  Enrollment Enrollments @relation(fields: [enrollment_id], references: [id])
  Batch      Batches     @relation(fields: [batch_id], references: [id])
}

model Attendance {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  batch_id      String
  enrollment_id String
  date          DateTime
  status        String
  marked_by     String
  created_at    DateTime

  Batch      Batches     @relation(fields: [batch_id], references: [id])
  Enrollment Enrollments @relation(fields: [enrollment_id], references: [id])
  Staff      Staff       @relation(fields: [marked_by], references: [id])
}

model Performance {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  tenant_id     String
  enrollment_id String
  marks         Float
  remarks       String
  evaluated_by  String
  created_at    DateTime

  Tenant     Tenants     @relation(fields: [tenant_id], references: [id])
  Enrollment Enrollments @relation(fields: [enrollment_id], references: [id])
  Staff      Staff       @relation(fields: [evaluated_by], references: [id])
}

model Invoices {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  branch_id    String
  student_id   String
  product_id   String
  period_start DateTime
  period_end   DateTime
  due_date     DateTime
  amount       Float
  status       String
  created_at   DateTime
  updated_at   DateTime

  Branch   Branches   @relation(fields: [branch_id], references: [id])
  Student  Students   @relation(fields: [student_id], references: [id])
  Product  Products   @relation(fields: [product_id], references: [id])
  Payments Payments[]
}

model Payments {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  invoice_id  String
  paid_on     DateTime
  transaction String
  comments    String
  created_at  DateTime
  updated_at  DateTime

  Invoice Invoices @relation(fields: [invoice_id], references: [id])
}

model InstitutionBilling {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  branch_id             String
  subscriptiontier_id   String
  month_year            String
  total_active_students Int
  amount_per_student    Float
  total_amount          Float
  status                String
  generated_at          DateTime
  paid_at               DateTime?

  Branch           Branches          @relation(fields: [branch_id], references: [id])
  SubscriptionTier SubscriptionTiers @relation(fields: [subscriptiontier_id], references: [id])
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  branch_id  String
  title      String
  message    String
  type       String
  created_by String
  created_at DateTime

  Branch Branches @relation(fields: [branch_id], references: [id])
  User   Users    @relation(fields: [created_by], references: [id], name: "NotificationCreator")
}
